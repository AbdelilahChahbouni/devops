-Lesson 1:
	-types of sheles
		-bash ==> Bource Again Shell:
			-Bash is a command Line Interpreter 
			-Bash script is a series of commands written in file
				-the command is read and execute by bash program
				-The program execute Line by Line
		-ZSH
		-Ksh
		-Csh

-Lesson 2:
	-scripting basics:
		-How To create shell script:
			-create file whit vim or nano have script.sh
			-the file script start whit #!/bin/bash
			-change file permission +x
			-and run script ./script.sh
		-cat /etc/shells 
		-which bash
		-file script.sh
	-Exit Status:
		echo $?
	-predefine variables:
		-$0 get name runing script
		-$# get number of arguments passed to script
		-$* print all arguments
		-$1-$9 select value of one argument from 1 to 9
		-$! get process id run in background 
	-Arthmetic Operators:
		- + * / ++ -- **
		- $((a + b)) or let=a+b
	-Comprison Operators:
		- > < >= <= == !=

	-Command Substitution:
		-files=$(command) like files=$(ls)
		-files=`ls` ==> backtick
	-Braces Expansion:
		-{str1,str2,str3}
		-{start..end..+2} ==> {1..5} = 1 2 3 4 5

	-read input from user:
		-read name
		-p , -s , -t ,-n
	-conditional operators:
		-comparison operators for numerical values:
			-eq = equal
			-ne = not equal
			-gt = greather then
			-lt = less then
			-ge = greather equal 
			-le = less equal
		-comparison operators for string:
			- = , > , < , != , -z this for empty string
		- logical opertors:
			-&& , || , !
		
		- file Operators:
			-e file exists
			-f is a file	
			-d is directory
			-r readable
			-w writable
			-x exuctable
		-conditional operator:
			-single Brackets [..]
			-double brackets [[..]]
	-if statments:
		- if [ condition ] then
			block code
		  fi
		- if [ condition ] then
			block code
		  else
		  	block code
		  fi
		- if [ condition ] then
			block code
		  elif [ condition ] then
		  	block code
		  else
		  	block code 
		  fi
	-Regular experssion:
		- . Any Carcater
		- * zero or more
		- + one or more
		- ? zero or one
		- ^ start whit string
		- $ end whit string
		- \ skip carcter 
-lesson3:
	-Case Statments:
		case expression in:
			pattern1)
				block code
				;;
			pattern2)
				block code
				;;
			*)
				block code
				;;
		esac
	-Arrays:
		- arr=(val1 val2 val3) declare array
		- arr=() empty array
		- ${arr[2]} get element by index 2
		- ${arr[@]} get all elements of Arrays
		- ${#arr[@]} get size of Arrays
		- ${!arr[@]} get index of elements
		- arr+=(new_element) add new element to array
		- unset arry[2] remove element of id 2
		- ${arr[@]:start:end} slicing array
		- assosiative array 
			- decalre -A name_arr === declre of assosiative array
			- arr[key1]=value1 === add value to assosiative array
	-for loop:
		- for variable in list
		  do 
			block code 
		  done
	-while loop:
		- while [condition]
			do
				block code
			done
	-shift command:
		shift n 
		n ==> number of shift argument 
	-read files:
		method one:
			while IFS= read -r Line
			do
				commands
			done
	-until loop:
		until [condition false]
		do	
			code block
		done
-lesson4:
	-function:
		function func_name {
			code
		}
	or
		func_name() {
			code
		}
		
	-Sed command:
		-replacing and substituting
			-sed 's/old word/new word/' input file ==> replace first word
			-sed 's/old word/new word/2' input file ==> replace 1 , 2 word 
			-sed 's/old word/new word/g' input file ==> replace all words 
			-sed '1s/old word/new word/g' input file ==> replace all in first Line
			-sed 's/^old word/new word/g' input file ==> replace all start with specific word
			-sed 's/old word$/new word/g' input file ==> replace all end whit specific word 
		-sed Operators:
			-sed 's/old/new/p' input_file ==> Duplicating the Replacing lines
			-sed -n 's/old/new/p' input_file ==> Printing the Replacing lines
			-sed 's/word/ d' input_file ==> remove the line a contain this word 
			-sed -e 'sed_command1' -e 'sed_command2' input_file ==> execute multiple commands at once
			-sed -f 'sed_commands' input_file ==> read commands from a file
			-sed -i 's/old/new/' input_file ==> use -i to save the modification on original file
			
		

			 

		

 	


