1-docker image pull imageName
2-docker container create -it imageName bash # i = interact , t = tty or terminal
3-docker container start -i containerName
4-docker container stop containerName
5-docker run -it imageName /bin/bash # make all this commands in one command
6-docker ps -a # to display created containers
7-docker run -d centos # -d = detach run container in background
8-docker run -d centos sleep 20 # stop the container after 20 s in background
9-docker exec -it container_id bash # log in to specific container
10-docker rm container_name
11-docker rmi image_name
12-docker images
13-dokcer ps # list runnig containers
14-docker ps -a # list all containers


docker networking Commands:
1-docker network ls
2-docker network create net_name
3-docker network create --subnet 10.0.0.0/24 net_name
4-docker network inspect net_name
5-docker run -it --network net_name image_name
6-docker network connect net_name cont_name
7-docker network disconnect net_name cont_name

docker container port:
1-docker run -p 3000:80 nginx
2-docker run -P nginx

docker image:
1-docker pull imageName:tag
2-docker history image_name
3-docker commit container_id new_image_name image:tag

docker File:
1-create file named Dockerfile
2-docker build -t name-iamge . # . for location of docker file 
3-EntryPoint , Maintainer , Expose 
4-COPY , WORKDIR , ENV
5- CMD ["/bin/sh" , "-c" , "${env1} ${env2}"] # how to use env variable in CMD statment

docker volumes:
1-docker volume create volume_name
2-docker volume ls
3-docker volume rm volume_name
4-docker run -v valume_name:container_directory:ro image_name  # ro for read only
5-VOLUME /dockerfilevolume # create new volume using dockerFile

Bind Mounting:
1-docker run -d -it -v local-folder:docker-dir-folder
2-docker run -d -it -v local-folder:docker-dir-folder:ro

Sharing data between multiple containers:
1-docker run -d --volume-from container1
2-docker run -d --volume-from container1:ro

Docker Compose:
1-Docker compose file structure:
	-version
	-services
	-build
	-container_name
	-Ports
	-volumes
2-Example:
	version:`3`
	services:
	  database:
	    image:mysql
	    conatiner_name: dolfinEd
	    volumes:
	      -hostPath:containerPath
	      -volumeName:containerPath
          frontend:
	    build:.
            ports:
	      -"3000:5000"
	volumes:
	  volumeName: {}
3-Docker Compose Commands:
  1-docker-compose build # to build the image
  2-docker-compose run service-name # create container from image
  3-docker-compose up # build image and start the cotainers
  4-docker-compose -f fileName up
  5-docker-compose up -d
  6-docker-compose down # stop and remove all containers
  7-docker-compose down --volume # stop and remove all containers with volumes







